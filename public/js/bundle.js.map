{"version":3,"sources":["index.js"],"names":["matches","document","querySelectorAll","inputs","forEach","match","addEventListener","guesses","groupTable","parentNode","nextElementSibling","value","adjustTable","dataset","result","guess","team","querySelector","id","children","textContent","guessOne","guessTwo","firstTeam","secondTeam"],"mappings":"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","file":"bundle.js","sourceRoot":"","sourcesContent":["const matches = document.querySelectorAll('.match');\nconst inputs = document.querySelectorAll('input');\n\nmatches.forEach(match => {\n  match.addEventListener('change', () => {\n    const guesses = match.querySelectorAll('input');\n    const groupTable = match.parentNode.parentNode.nextElementSibling;\n\n    if (guesses[0].value > guesses[1].value) {\n      adjustTable(guesses[0], guesses[1], guesses, groupTable);\n    } else if (guesses[0].value < guesses[1].value) {\n      adjustTable(guesses[1], guesses[0 ], guesses, groupTable);\n    } else {\n      if (guesses[0].dataset.result === 'tie') {\n        return;\n      }\n\n      guesses.forEach(guess => {\n        const team = groupTable.querySelector(`[data-id=\"${guess.dataset.id}\"]`);\n\n        if (guess.dataset.result === 'lose') {\n          team.children[3].textContent = (team.children[3].textContent * 1) - 1;\n        }\n\n        if (guess.dataset.result === 'win') {\n          team.children[1].textContent = (team.children[1].textContent * 1) - 1;\n          team.children[4].textContent = (team.children[4].textContent * 1) - 3;\n        }\n\n        team.children[2].textContent = (team.children[2].textContent * 1) + 1;\n        team.children[4].textContent = (team.children[4].textContent * 1) + 1;\n      });\n\n      guesses[0].dataset.result='tie';\n      guesses[1].dataset.result='tie';\n    }\n\n  })\n})\n\n\nconst adjustTable = (guessOne, guessTwo, guesses, groupTable) => {\n  const firstTeam = groupTable.querySelector(`[data-id=\"${guessOne.dataset.id}\"]`);\n  const secondTeam = groupTable.querySelector(`[data-id=\"${guessTwo.dataset.id}\"]`);\n\n  if (guessOne.dataset.result === 'win') {\n    return;\n  }\n\n  if (guessOne.dataset.result === 'tie') {\n    guesses.forEach(guess => {\n      const team = groupTable.querySelector(`[data-id=\"${guess.dataset.id}\"]`);\n      team.children[2].textContent = (team.children[2].textContent * 1) - 1;\n      team.children[4].textContent = (team.children[4].textContent * 1) - 1;\n    });\n  }\n\n  if (guessOne.dataset.result === 'lose') {\n      firstTeam.children[3].textContent = (firstTeam.children[3].textContent * 1) - 1;\n      secondTeam.children[1].textContent = (secondTeam.children[1].textContent * 1) - 1;\n      secondTeam.children[4].textContent = (secondTeam.children[4].textContent * 1) - 3;\n  }\n\n  firstTeam.children[1].textContent = (firstTeam.children[1].textContent * 1) + 1;\n  firstTeam.children[4].textContent = (firstTeam.children[4].textContent * 1) + 3;\n\n  secondTeam.children[3].textContent = (firstTeam.children[3].textContent * 1) + 1;\n\n  guessOne.dataset.result='win';\n  guessTwo.dataset.result='lose';\n\n}\n"]}